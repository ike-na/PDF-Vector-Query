{"ast":null,"code":"var _jsxFileName = \"/home/ike/PROJECTS/pdf-rag-query/src/components/RAGApplication.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef, ChangeEvent, FormEvent } from 'react';\n// import './RAGApplication.css';\n\n// // Declare Three.js as a global variable since we're loading it from a CDN\n// declare global {\n//   interface Window { THREE: any; }\n// }\n\n// interface FileInfo {\n//   name: string;\n// }\n\n// enum AppState {\n//   Upload,\n//   Embedding,\n//   Chat\n// }\n\n// const RAGApplication: React.FC = () => {\n//   const [files, setFiles] = useState<FileInfo[]>([]);\n//   const [question, setQuestion] = useState<string>('');\n//   const [answer, setAnswer] = useState<string>('');\n//   const [appState, setAppState] = useState<AppState>(AppState.Upload);\n//   const animationRef = useRef<HTMLDivElement>(null);\n\n//   useEffect(() => {\n//     if (appState === AppState.Embedding && animationRef.current) {\n//       initThreeJsAnimation();\n//     }\n//   }, [appState]);\n\n//   const initThreeJsAnimation = () => {\n//     const scene = new window.THREE.Scene();\n//     const camera = new window.THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n//     const renderer = new window.THREE.WebGLRenderer();\n//     renderer.setSize(300, 300);\n//     animationRef.current?.appendChild(renderer.domElement);\n\n//     // Create planet\n//     const geometry = new window.THREE.SphereGeometry(1, 32, 32);\n//     // const material = new window.THREE.MeshPhongMaterial({\n//     //   map: new window.THREE.TextureLoader().load('https://threejsfundamentals.org/threejs/resources/images/world.jpg'),\n//     //   bumpMap: new window.THREE.TextureLoader().load('https://threejsfundamentals.org/threejs/resources/images/earth_bumpmap.jpg'),\n//     //   bumpScale: 0.05,\n//     // });\n//     const material = new window.THREE.MeshBasicMaterial({ color: 0xcccccc, wireframe: true, bumpScale: 0.05, });\n//     const planet = new window.THREE.Mesh(geometry, material);\n//     scene.add(planet);\n\n//     // Add ambient light\n//     const ambientLight = new window.THREE.AmbientLight(0xffffff, 0.5);\n//     scene.add(ambientLight);\n\n//     // Add point light\n//     const pointLight = new window.THREE.PointLight(0xffffff, 1);\n//     pointLight.position.set(5, 3, 5);\n//     scene.add(pointLight);\n\n//     // // Create particle system\n//     // const particlesGeometry = new window.THREE.BufferGeometry();\n//     // const particlesCnt = 5000;\n//     // const posArray = new Float32Array(particlesCnt * 3);\n\n//     // for(let i = 0; i < particlesCnt * 3; i++) {\n//     //   posArray[i] = (Math.random() - 0.5) * 5;\n//     // }\n\n//     // particlesGeometry.setAttribute('position', new window.THREE.BufferAttribute(posArray, 3));\n//     // const particlesMaterial = new window.THREE.PointsMaterial({\n//     //   size: 0.005,\n//     //   color: 0x4299e1,\n//     // });\n\n//     // const particlesMesh = new window.THREE.Points(particlesGeometry, particlesMaterial);\n//     // scene.add(particlesMesh);\n\n//     camera.position.z = 5;\n\n//     const animate = () => {\n//       requestAnimationFrame(animate);\n//       planet.rotation.y += 0.005;\n//       planet.rotation.x += 0.005;\n//     //   particlesMesh.rotation.y += 0.005;\n//       renderer.render(scene, camera);\n//     };\n\n//     animate();\n\n//     // Cleanup function\n//     return () => {\n//       renderer.dispose();\n//       animationRef.current?.removeChild(renderer.domElement);\n//     };\n//   };\n\n//   const handleFileUpload = (event: ChangeEvent<HTMLInputElement>) => {\n//     const uploadedFiles = event.target.files;\n//     if (uploadedFiles) {\n//       const newFiles = Array.from(uploadedFiles).map(file => ({ name: file.name }));\n//       setFiles(prevFiles => [...prevFiles, ...newFiles]);\n//     }\n//   };\n\n//   const handleEmbed = () => {\n//     setAppState(AppState.Embedding);\n//     // Simulate embedding process\n//     setTimeout(() => {\n//       setAppState(AppState.Chat);\n//     }, 10000); // 10 seconds for demonstration\n//   };\n\n//   const handleQuestionSubmit = (event: FormEvent<HTMLFormElement>) => {\n//     event.preventDefault();\n//     // Here you would typically send the question to your backend\n//     setAnswer(`Here's the answer to your question: \"${question}\"`);\n//     setQuestion('');\n//   };\n\n//   return (\n//     <div className=\"rag-application\">\n//       <div className=\"container\">\n//         <h1 className=\"title\">RAG Application</h1>\n\n//         {appState === AppState.Upload && (\n//           <div className=\"section\">\n//             <h2 className=\"section-title\">Upload PDFs</h2>\n//             <label className=\"file-upload\">\n//               <span>Drop files to upload, or click to browse</span>\n//               <input type=\"file\" onChange={handleFileUpload} multiple accept=\".pdf\" />\n//             </label>\n//             {files.length > 0 && (\n//               <div className=\"file-list\">\n//                 <h3 className=\"file-list-title\">Uploaded Files:</h3>\n//                 <ul>\n//                   {files.map((file, index) => (\n//                     <li key={index} className=\"file-item\">\n//                       <span>{file.name}</span>\n//                     </li>\n//                   ))}\n//                 </ul>\n//                 <button className=\"embed-button\" onClick={handleEmbed}>Embed PDFs</button>\n//               </div>\n//             )}\n//           </div>\n//         )}\n\n//         {appState === AppState.Embedding && (\n//           <div className=\"loading-animation\" ref={animationRef}></div>\n//         )}\n\n//         {appState === AppState.Chat && (\n//           <>\n//             <div className=\"section\">\n//               <h2 className=\"section-title\">Ask a Question</h2>\n//               <form onSubmit={handleQuestionSubmit} className=\"question-form\">\n//                 <input\n//                   type=\"text\"\n//                   value={question}\n//                   onChange={(e: ChangeEvent<HTMLInputElement>) => setQuestion(e.target.value)}\n//                   placeholder=\"Enter your question here\"\n//                   className=\"question-input\"\n//                 />\n//                 <button type=\"submit\" className=\"submit-button\">\n//                   Submit Question\n//                 </button>\n//               </form>\n//             </div>\n\n//             {answer && (\n//               <div className=\"section\">\n//                 <h2 className=\"section-title\">Answer</h2>\n//                 <div className=\"answer-box\">\n//                   <p>{answer}</p>\n//                 </div>\n//               </div>\n//             )}\n//           </>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default RAGApplication;\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [showAlert, setShowAlert] = useState(false);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvasRef.current,\n      alpha: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    const geometry = new THREE.SphereGeometry(1, 32, 32);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00,\n      wireframe: true\n    });\n    const sphere = new THREE.Mesh(geometry, material);\n    scene.add(sphere);\n    camera.position.z = 5;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      sphere.rotation.x += 0.01;\n      sphere.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n    animate();\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  const handleFileChange = event => {\n    var _event$target$files;\n    const selectedFile = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (selectedFile && selectedFile.type === 'application/pdf') {\n      setFile(selectedFile);\n      setShowAlert(true);\n      setTimeout(() => setShowAlert(false), 3000);\n    } else {\n      setFile(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: \"background-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"PDF Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"pdf-upload\",\n            className: \"file-input-label\",\n            children: \"Choose PDF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"pdf-upload\",\n            type: \"file\",\n            accept: \".pdf\",\n            onChange: handleFileChange,\n            className: \"file-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-name\",\n            children: file ? file.name : 'No file chosen'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), showAlert && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Success!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Your PDF has been uploaded successfully.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"7U/1lYizlB22sshmsTpxIF0DfJc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","THREE","jsxDEV","_jsxDEV","App","_s","file","setFile","showAlert","setShowAlert","canvasRef","current","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","canvas","alpha","setSize","geometry","SphereGeometry","material","MeshBasicMaterial","color","wireframe","sphere","Mesh","add","position","z","animate","requestAnimationFrame","rotation","x","y","render","handleResize","width","height","aspect","updateProjectionMatrix","addEventListener","removeEventListener","handleFileChange","event","_event$target$files","selectedFile","target","files","type","setTimeout","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","accept","onChange","name","_c","$RefreshReg$"],"sources":["/home/ike/PROJECTS/pdf-rag-query/src/components/RAGApplication.tsx"],"sourcesContent":["// import React, { useState, useEffect, useRef, ChangeEvent, FormEvent } from 'react';\n// import './RAGApplication.css';\n\n// // Declare Three.js as a global variable since we're loading it from a CDN\n// declare global {\n//   interface Window { THREE: any; }\n// }\n\n// interface FileInfo {\n//   name: string;\n// }\n\n// enum AppState {\n//   Upload,\n//   Embedding,\n//   Chat\n// }\n\n// const RAGApplication: React.FC = () => {\n//   const [files, setFiles] = useState<FileInfo[]>([]);\n//   const [question, setQuestion] = useState<string>('');\n//   const [answer, setAnswer] = useState<string>('');\n//   const [appState, setAppState] = useState<AppState>(AppState.Upload);\n//   const animationRef = useRef<HTMLDivElement>(null);\n\n//   useEffect(() => {\n//     if (appState === AppState.Embedding && animationRef.current) {\n//       initThreeJsAnimation();\n//     }\n//   }, [appState]);\n\n//   const initThreeJsAnimation = () => {\n//     const scene = new window.THREE.Scene();\n//     const camera = new window.THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n//     const renderer = new window.THREE.WebGLRenderer();\n//     renderer.setSize(300, 300);\n//     animationRef.current?.appendChild(renderer.domElement);\n\n//     // Create planet\n//     const geometry = new window.THREE.SphereGeometry(1, 32, 32);\n//     // const material = new window.THREE.MeshPhongMaterial({\n//     //   map: new window.THREE.TextureLoader().load('https://threejsfundamentals.org/threejs/resources/images/world.jpg'),\n//     //   bumpMap: new window.THREE.TextureLoader().load('https://threejsfundamentals.org/threejs/resources/images/earth_bumpmap.jpg'),\n//     //   bumpScale: 0.05,\n//     // });\n//     const material = new window.THREE.MeshBasicMaterial({ color: 0xcccccc, wireframe: true, bumpScale: 0.05, });\n//     const planet = new window.THREE.Mesh(geometry, material);\n//     scene.add(planet);\n\n//     // Add ambient light\n//     const ambientLight = new window.THREE.AmbientLight(0xffffff, 0.5);\n//     scene.add(ambientLight);\n\n//     // Add point light\n//     const pointLight = new window.THREE.PointLight(0xffffff, 1);\n//     pointLight.position.set(5, 3, 5);\n//     scene.add(pointLight);\n\n//     // // Create particle system\n//     // const particlesGeometry = new window.THREE.BufferGeometry();\n//     // const particlesCnt = 5000;\n//     // const posArray = new Float32Array(particlesCnt * 3);\n    \n//     // for(let i = 0; i < particlesCnt * 3; i++) {\n//     //   posArray[i] = (Math.random() - 0.5) * 5;\n//     // }\n    \n//     // particlesGeometry.setAttribute('position', new window.THREE.BufferAttribute(posArray, 3));\n//     // const particlesMaterial = new window.THREE.PointsMaterial({\n//     //   size: 0.005,\n//     //   color: 0x4299e1,\n//     // });\n    \n//     // const particlesMesh = new window.THREE.Points(particlesGeometry, particlesMaterial);\n//     // scene.add(particlesMesh);\n\n//     camera.position.z = 5;\n\n//     const animate = () => {\n//       requestAnimationFrame(animate);\n//       planet.rotation.y += 0.005;\n//       planet.rotation.x += 0.005;\n//     //   particlesMesh.rotation.y += 0.005;\n//       renderer.render(scene, camera);\n//     };\n\n//     animate();\n\n//     // Cleanup function\n//     return () => {\n//       renderer.dispose();\n//       animationRef.current?.removeChild(renderer.domElement);\n//     };\n//   };\n\n//   const handleFileUpload = (event: ChangeEvent<HTMLInputElement>) => {\n//     const uploadedFiles = event.target.files;\n//     if (uploadedFiles) {\n//       const newFiles = Array.from(uploadedFiles).map(file => ({ name: file.name }));\n//       setFiles(prevFiles => [...prevFiles, ...newFiles]);\n//     }\n//   };\n\n//   const handleEmbed = () => {\n//     setAppState(AppState.Embedding);\n//     // Simulate embedding process\n//     setTimeout(() => {\n//       setAppState(AppState.Chat);\n//     }, 10000); // 10 seconds for demonstration\n//   };\n\n//   const handleQuestionSubmit = (event: FormEvent<HTMLFormElement>) => {\n//     event.preventDefault();\n//     // Here you would typically send the question to your backend\n//     setAnswer(`Here's the answer to your question: \"${question}\"`);\n//     setQuestion('');\n//   };\n\n//   return (\n//     <div className=\"rag-application\">\n//       <div className=\"container\">\n//         <h1 className=\"title\">RAG Application</h1>\n        \n//         {appState === AppState.Upload && (\n//           <div className=\"section\">\n//             <h2 className=\"section-title\">Upload PDFs</h2>\n//             <label className=\"file-upload\">\n//               <span>Drop files to upload, or click to browse</span>\n//               <input type=\"file\" onChange={handleFileUpload} multiple accept=\".pdf\" />\n//             </label>\n//             {files.length > 0 && (\n//               <div className=\"file-list\">\n//                 <h3 className=\"file-list-title\">Uploaded Files:</h3>\n//                 <ul>\n//                   {files.map((file, index) => (\n//                     <li key={index} className=\"file-item\">\n//                       <span>{file.name}</span>\n//                     </li>\n//                   ))}\n//                 </ul>\n//                 <button className=\"embed-button\" onClick={handleEmbed}>Embed PDFs</button>\n//               </div>\n//             )}\n//           </div>\n//         )}\n\n//         {appState === AppState.Embedding && (\n//           <div className=\"loading-animation\" ref={animationRef}></div>\n//         )}\n        \n//         {appState === AppState.Chat && (\n//           <>\n//             <div className=\"section\">\n//               <h2 className=\"section-title\">Ask a Question</h2>\n//               <form onSubmit={handleQuestionSubmit} className=\"question-form\">\n//                 <input\n//                   type=\"text\"\n//                   value={question}\n//                   onChange={(e: ChangeEvent<HTMLInputElement>) => setQuestion(e.target.value)}\n//                   placeholder=\"Enter your question here\"\n//                   className=\"question-input\"\n//                 />\n//                 <button type=\"submit\" className=\"submit-button\">\n//                   Submit Question\n//                 </button>\n//               </form>\n//             </div>\n            \n//             {answer && (\n//               <div className=\"section\">\n//                 <h2 className=\"section-title\">Answer</h2>\n//                 <div className=\"answer-box\">\n//                   <p>{answer}</p>\n//                 </div>\n//               </div>\n//             )}\n//           </>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default RAGApplication;\n\n\n\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst App: React.FC = () => {\n  const [file, setFile] = useState<File | null>(null);\n  const [showAlert, setShowAlert] = useState(false);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current, alpha: true });\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n    const geometry = new THREE.SphereGeometry(1, 32, 32);\n    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00, wireframe: true });\n    const sphere = new THREE.Mesh(geometry, material);\n\n    scene.add(sphere);\n    camera.position.z = 5;\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      sphere.rotation.x += 0.01;\n      sphere.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = event.target.files?.[0];\n    if (selectedFile && selectedFile.type === 'application/pdf') {\n      setFile(selectedFile);\n      setShowAlert(true);\n      setTimeout(() => setShowAlert(false), 3000);\n    } else {\n      setFile(null);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <canvas ref={canvasRef} className=\"background-canvas\" />\n      <div className=\"content\">\n        <div className=\"upload-box\">\n          <h1>PDF Upload</h1>\n          <div className=\"file-input-container\">\n            <label htmlFor=\"pdf-upload\" className=\"file-input-label\">\n              Choose PDF\n            </label>\n            <input\n              id=\"pdf-upload\"\n              type=\"file\"\n              accept=\".pdf\"\n              onChange={handleFileChange}\n              className=\"file-input\"\n            />\n            <span className=\"file-name\">{file ? file.name : 'No file chosen'}</span>\n          </div>\n          {showAlert && (\n            <div className=\"alert\">\n              <h2>Success!</h2>\n              <p>Your PDF has been uploaded successfully.</p>\n            </div>\n          )}\n        </div>\n      </div>\n      \n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAc,IAAI,CAAC;EACnD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMY,SAAS,GAAGX,MAAM,CAAoB,IAAI,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACd,IAAI,CAACU,SAAS,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}