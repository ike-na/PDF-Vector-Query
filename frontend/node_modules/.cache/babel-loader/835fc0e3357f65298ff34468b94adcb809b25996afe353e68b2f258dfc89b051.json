{"ast":null,"code":"var _jsxFileName = \"/home/ike/PROJECTS/pdf-rag-query/frontend/src/components/PdfUploader.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './PdfUploader.css';\nimport QuestionForm from './QuestionForm'; // Import the QuestionForm component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PdfUploader = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [fileName, setFileName] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDone, setIsDone] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [message, setMessage] = useState('');\n  const [isQuestioning, setIsQuestioning] = useState(false); // State for question-asking view\n\n  const handleFileChange = event => {\n    if (event.target.files && event.target.files[0]) {\n      setFile(event.target.files[0]);\n      setFileName(event.target.files[0].name);\n    }\n  };\n  const handleUpload = async () => {\n    if (!file) {\n      setMessage('Please select a PDF file to upload.');\n      return;\n    }\n    setIsLoading(true);\n    setIsDone(false);\n    setProgress(0);\n    const formData = new FormData();\n    formData.append('pdf', file);\n    try {\n      const response = await fetch('http://localhost:5000/upload', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n      setMessage('');\n    } catch (error) {\n      setMessage(`Error uploading file: ${error}`);\n    }\n\n    // Simulating upload process with progress\n    for (let i = 0; i <= 100; i += 2) {\n      await new Promise(resolve => setTimeout(resolve, 60));\n      setProgress(i);\n    }\n    setIsLoading(false);\n    setIsDone(true);\n    setTimeout(() => {\n      setIsQuestioning(true);\n    }, 3500);\n  };\n  useEffect(() => {\n    if (isDone) {\n      const timer = setTimeout(() => setIsDone(false), 3500);\n      return () => clearTimeout(timer);\n    }\n  }, [isDone]);\n  const renderProgressBar = progress => {\n    const barWidth = 50;\n    const filledWidth = Math.floor(progress / 100 * barWidth);\n    const emptyWidth = barWidth - filledWidth;\n    return `${progress}% [${'■'.repeat(filledWidth)}${''.repeat(emptyWidth)}]`;\n  };\n  if (isQuestioning) {\n    return /*#__PURE__*/_jsxDEV(QuestionForm, {\n      onClose: () => setIsQuestioning(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pdf-uploader\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: '> SELECT PDF FILE:'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"file-input-label\",\n      children: [\"Choose file\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".pdf\",\n        onChange: handleFileChange,\n        className: \"file-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), fileName && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"selected-file\",\n      children: [\" \", '>', \" Selected file: \", fileName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: !file,\n      className: \"upload-button\",\n      children: isLoading ? 'UPLOADING...' : 'UPLOAD PDF'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: 'UPLOADING...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: renderProgressBar(progress)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), isDone && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"completion-message\",\n      children: '> UPLOAD COMPLETE'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(PdfUploader, \"tTBBoLyvhuhOVmDyrWExRPmU048=\");\n_c = PdfUploader;\nexport default PdfUploader;\nvar _c;\n$RefreshReg$(_c, \"PdfUploader\");","map":{"version":3,"names":["React","useState","useEffect","QuestionForm","jsxDEV","_jsxDEV","PdfUploader","_s","file","setFile","fileName","setFileName","isLoading","setIsLoading","isDone","setIsDone","progress","setProgress","message","setMessage","isQuestioning","setIsQuestioning","handleFileChange","event","target","files","name","handleUpload","formData","FormData","append","response","fetch","method","body","ok","Error","error","i","Promise","resolve","setTimeout","timer","clearTimeout","renderProgressBar","barWidth","filledWidth","Math","floor","emptyWidth","repeat","onClose","_jsxFileName","lineNumber","columnNumber","className","children","type","accept","onChange","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/ike/PROJECTS/pdf-rag-query/frontend/src/components/PdfUploader.tsx"],"sourcesContent":["import React, { useState, ChangeEvent, useEffect } from 'react';\nimport './PdfUploader.css';\nimport QuestionForm from './QuestionForm';  // Import the QuestionForm component\nimport Ball from './Ball';\n\nconst PdfUploader: React.FC = () => {\n  const [file, setFile] = useState<File | null>(null);\n  const [fileName, setFileName] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isDone, setIsDone] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n  const [message, setMessage] = useState<string>('');  \n  const [isQuestioning, setIsQuestioning] = useState<boolean>(false);  // State for question-asking view\n\n  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      setFile(event.target.files[0]);\n      setFileName(event.target.files[0].name);\n    }\n  };\n\n  const handleUpload = async () => {\n    if (!file) {\n      setMessage('Please select a PDF file to upload.');\n      return;\n    }\n    setIsLoading(true);\n    setIsDone(false);\n    setProgress(0);\n\n    const formData = new FormData();\n    formData.append('pdf', file);\n    try {\n      const response = await fetch('http://localhost:5000/upload', {\n        method: 'POST',\n        body: formData,\n      });\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n      setMessage('');\n    } catch (error) {\n      setMessage(`Error uploading file: ${error}`);\n    }\n\n    // Simulating upload process with progress\n    for (let i = 0; i <= 100; i += 2) {\n      await new Promise(resolve => setTimeout(resolve, 60));\n      setProgress(i);\n    }\n    setIsLoading(false);\n    setIsDone(true);\n    setTimeout(() => {setIsQuestioning(true);}, 3500);\n  };\n\n  useEffect(() => {\n    if (isDone) {\n      const timer = setTimeout(() => setIsDone(false), 3500);\n      return () => clearTimeout(timer);\n    }\n  }, [isDone]);\n\n  const renderProgressBar = (progress: number) => {\n    const barWidth = 50;\n    const filledWidth = Math.floor((progress / 100) * barWidth);\n    const emptyWidth = barWidth - filledWidth;\n    return `${progress}% [${'■'.repeat(filledWidth)}${''.repeat(emptyWidth)}]`;\n  };\n\n\n  if (isQuestioning) {\n    return <QuestionForm onClose={() => setIsQuestioning(false)} />; \n  }\n\n  return (\n    <div className=\"pdf-uploader\">\n      <p>{'> SELECT PDF FILE:'}</p>\n      <label className=\"file-input-label\">\n    Choose file\n    <input\n        type=\"file\"\n        accept=\".pdf\"\n        onChange={handleFileChange}\n        className=\"file-input\"/>\n    </label>\n    {fileName && <p className=\"selected-file\"> {'>'} Selected file: {fileName}</p>}\n      <button\n        onClick={handleUpload}\n        disabled={!file}\n        className=\"upload-button\"\n      >\n        {isLoading ? 'UPLOADING...' : 'UPLOAD PDF'}\n      </button>\n      {isLoading && (\n        <div className=\"progress-container\">\n          <p>{'UPLOADING...'}</p>\n          <div className=\"progress-bar\">\n            {renderProgressBar(progress)}\n          </div>\n        </div>\n      )}\n      {isDone && (\n        <div className=\"completion-message\">\n          {'> UPLOAD COMPLETE'}\n        </div>\n      )}\n      {message && <p>{message}</p>} \n    </div>\n  );\n};\n\nexport default PdfUploader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}