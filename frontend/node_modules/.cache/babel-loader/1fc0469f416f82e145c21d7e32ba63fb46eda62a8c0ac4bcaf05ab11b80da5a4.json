{"ast":null,"code":"var _jsxFileName = \"/home/ike/PROJECTS/pdf-rag-query/frontend/src/components/SimplePdfUploader.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimplePdfUploader = () => {\n  _s();\n  const [file, setFile] = useState(null); // State to store the selected file\n  const [message, setMessage] = useState(''); // State to store upload status messages\n\n  // Handle file selection\n  const handleFileChange = event => {\n    if (event.target.files && event.target.files[0]) {\n      setFile(event.target.files[0]); // Store the selected file\n    }\n  };\n\n  // Handle file upload to the backend\n  const handleUpload = async () => {\n    if (!file) {\n      setMessage('Please select a PDF file to upload.'); // Alert if no file is selected\n      return;\n    }\n    const formData = new FormData(); // Create a FormData object to hold the file\n    formData.append('pdf', file); // Append the file to the FormData with 'pdf' as the key\n\n    try {\n      // Send the file to the backend\n      const response = await fetch('http://localhost:5000/upload', {\n        // Use your actual backend URL\n        method: 'POST',\n        // HTTP POST request\n        body: formData // Send the form data\n      });\n      if (!response.ok) {\n        throw new Error('Upload failed'); // Handle unsuccessful response\n      }\n      setMessage('Upload successful!'); // Update message on successful upload\n    } catch (error) {\n      setMessage(`Error uploading file: ${error}`); // Handle upload error\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pdf-uploader\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".pdf\" // Allow only PDF files\n      ,\n      onChange: handleFileChange // Trigger file selection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: !file,\n      children: \"Upload PDF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), \"  \", message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 19\n    }, this), \"  \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(SimplePdfUploader, \"yUNOnQxWjnYufcbQnTW1CT0xGVo=\");\n_c = SimplePdfUploader;\nexport default SimplePdfUploader;\nvar _c;\n$RefreshReg$(_c, \"SimplePdfUploader\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SimplePdfUploader","_s","file","setFile","message","setMessage","handleFileChange","event","target","files","handleUpload","formData","FormData","append","response","fetch","method","body","ok","Error","error","className","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/ike/PROJECTS/pdf-rag-query/frontend/src/components/SimplePdfUploader.tsx"],"sourcesContent":["import React, { useState, ChangeEvent } from 'react';\n\nconst SimplePdfUploader: React.FC = () => {\n  const [file, setFile] = useState<File | null>(null);  // State to store the selected file\n  const [message, setMessage] = useState<string>('');  // State to store upload status messages\n\n  // Handle file selection\n  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      setFile(event.target.files[0]);  // Store the selected file\n    }\n  };\n\n  // Handle file upload to the backend\n  const handleUpload = async () => {\n    if (!file) {\n      setMessage('Please select a PDF file to upload.');  // Alert if no file is selected\n      return;\n    }\n\n    const formData = new FormData();  // Create a FormData object to hold the file\n    formData.append('pdf', file);  // Append the file to the FormData with 'pdf' as the key\n\n    try {\n      // Send the file to the backend\n      const response = await fetch('http://localhost:5000/upload', {  // Use your actual backend URL\n        method: 'POST',  // HTTP POST request\n        body: formData,  // Send the form data\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');  // Handle unsuccessful response\n      }\n\n      setMessage('Upload successful!');  // Update message on successful upload\n    } catch (error) {\n      setMessage(`Error uploading file: ${error}`);  // Handle upload error\n    }\n  };\n\n  return (\n    <div className=\"pdf-uploader\">\n      <input\n        type=\"file\"\n        accept=\".pdf\"  // Allow only PDF files\n        onChange={handleFileChange}  // Trigger file selection\n      />\n      <button onClick={handleUpload} disabled={!file}>Upload PDF</button>  {/* Upload button */}\n      {message && <p>{message}</p>}  {/* Display status message */}\n    </div>\n  );\n};\n\nexport default SimplePdfUploader;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAqB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,iBAA2B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAc,IAAI,CAAC,CAAC,CAAE;EACtD,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAS,EAAE,CAAC,CAAC,CAAE;;EAErD;EACA,MAAMS,gBAAgB,GAAIC,KAAoC,IAAK;IACjE,IAAIA,KAAK,CAACC,MAAM,CAACC,KAAK,IAAIF,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;MAC/CN,OAAO,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;IACnC;EACF,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAACR,IAAI,EAAE;MACTG,UAAU,CAAC,qCAAqC,CAAC,CAAC,CAAE;MACpD;IACF;IAEA,MAAMM,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC,CAAC,CAAE;IAClCD,QAAQ,CAACE,MAAM,CAAC,KAAK,EAAEX,IAAI,CAAC,CAAC,CAAE;;IAE/B,IAAI;MACF;MACA,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;QAAG;QAC9DC,MAAM,EAAE,MAAM;QAAG;QACjBC,IAAI,EAAEN,QAAQ,CAAG;MACnB,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAE;MACrC;MAEAd,UAAU,CAAC,oBAAoB,CAAC,CAAC,CAAE;IACrC,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdf,UAAU,CAAC,yBAAyBe,KAAK,EAAE,CAAC,CAAC,CAAE;IACjD;EACF,CAAC;EAED,oBACErB,OAAA;IAAKsB,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3BvB,OAAA;MACEwB,IAAI,EAAC,MAAM;MACXC,MAAM,EAAC,MAAM,CAAE;MAAA;MACfC,QAAQ,EAAEnB,gBAAiB,CAAE;IAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eACF9B,OAAA;MAAQ+B,OAAO,EAAEpB,YAAa;MAACqB,QAAQ,EAAE,CAAC7B,IAAK;MAAAoB,QAAA,EAAC;IAAU;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,MAAE,EACpEzB,OAAO,iBAAIL,OAAA;MAAAuB,QAAA,EAAIlB;IAAO;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAAC,IAAE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEV,CAAC;AAAC5B,EAAA,CAjDID,iBAA2B;AAAAgC,EAAA,GAA3BhC,iBAA2B;AAmDjC,eAAeA,iBAAiB;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}