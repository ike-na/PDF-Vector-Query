{"ast":null,"code":"var _jsxFileName = \"/home/ike/PROJECTS/pdf-rag-query/frontend/src/components/PdfUploader.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './PdfUploader.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PdfUploader = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDone, setIsDone] = useState(false);\n  const [progress, setProgress] = useState(0);\n\n  // Handle file selection\n  const handleFileChange = event => {\n    if (event.target.files && event.target.files[0]) {\n      setFile(event.target.files[0]);\n    }\n  };\n\n  // Handle file upload to the backend\n  const handleUpload = async () => {\n    if (!file) return;\n    setIsLoading(true); // Start loading\n    setIsDone(false);\n    setProgress(0);\n    const formData = new FormData(); // Create FormData object to hold the file\n    formData.append('pdf', file); // Append the file to the FormData with 'pdf' as the key\n\n    try {\n      // Use fetch to send the file to the backend\n      const response = await fetch('http://localhost:5000/upload', {\n        // Replace with your backend URL\n        method: 'POST',\n        // HTTP POST request\n        body: formData,\n        // Send the form data\n        headers: {\n          // 'Content-Type': 'multipart/form-data' is automatically set by the browser when using FormData\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Upload failed'); // Handle unsuccessful response\n      }\n\n      // Simulate progress, replace this with actual progress tracking if your API supports it\n      for (let i = 0; i <= 100; i += 2) {\n        await new Promise(resolve => setTimeout(resolve, 50)); // Simulating network delay\n        setProgress(i); // Update progress bar\n      }\n      setIsDone(true); // Mark upload as done\n    } catch (error) {\n      console.error('Error uploading file:', error); // Handle upload error\n    } finally {\n      setIsLoading(false); // Stop loading\n    }\n  };\n\n  // Effect to auto-hide the completion message after 3 seconds\n  useEffect(() => {\n    if (isDone) {\n      const timer = setTimeout(() => setIsDone(false), 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [isDone]);\n\n  // Render the progress bar with ASCII characters\n  const renderProgressBar = progress => {\n    const barWidth = 50;\n    const filledWidth = Math.floor(progress / 100 * barWidth);\n    const emptyWidth = barWidth - filledWidth;\n    return `${progress}% [${'■'.repeat(filledWidth)}${''.repeat(emptyWidth)}]`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pdf-uploader\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: '> SELECT PDF FILE:'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".pdf\",\n      onChange: handleFileChange // Trigger file selection\n      ,\n      className: \"file-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload // Trigger file upload\n      ,\n      disabled: !file || isLoading // Disable button when no file or loading\n      ,\n      className: \"upload-button\",\n      children: isLoading ? 'UPLOADING...' : 'UPLOAD PDF'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: 'UPLOADING...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: [renderProgressBar(progress), \"  // Display the progress bar\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), isDone && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"completion-message\",\n      children: ['> UPLOAD COMPLETE', \"  // Show completion message\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(PdfUploader, \"ox9XNm0b02nv+jhzeHgUBLfNLvU=\");\n_c = PdfUploader;\nexport default PdfUploader;\nvar _c;\n$RefreshReg$(_c, \"PdfUploader\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PdfUploader","_s","file","setFile","isLoading","setIsLoading","isDone","setIsDone","progress","setProgress","handleFileChange","event","target","files","handleUpload","formData","FormData","append","response","fetch","method","body","headers","ok","Error","i","Promise","resolve","setTimeout","error","console","timer","clearTimeout","renderProgressBar","barWidth","filledWidth","Math","floor","emptyWidth","repeat","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/ike/PROJECTS/pdf-rag-query/frontend/src/components/PdfUploader.tsx"],"sourcesContent":["import React, { useState, ChangeEvent, useEffect } from 'react';\nimport './PdfUploader.css';\n\nconst PdfUploader: React.FC = () => {\n  const [file, setFile] = useState<File | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isDone, setIsDone] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  // Handle file selection\n  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      setFile(event.target.files[0]);\n    }\n  };\n\n  // Handle file upload to the backend\n  const handleUpload = async () => {\n    if (!file) return;\n\n    setIsLoading(true);  // Start loading\n    setIsDone(false);\n    setProgress(0);\n\n    const formData = new FormData();  // Create FormData object to hold the file\n    formData.append('pdf', file);  // Append the file to the FormData with 'pdf' as the key\n\n    try {\n      // Use fetch to send the file to the backend\n      const response = await fetch('http://localhost:5000/upload', {  // Replace with your backend URL\n        method: 'POST',  // HTTP POST request\n        body: formData,  // Send the form data\n        headers: {\n          // 'Content-Type': 'multipart/form-data' is automatically set by the browser when using FormData\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');  // Handle unsuccessful response\n      }\n\n      // Simulate progress, replace this with actual progress tracking if your API supports it\n      for (let i = 0; i <= 100; i += 2) {\n        await new Promise(resolve => setTimeout(resolve, 50));  // Simulating network delay\n        setProgress(i);  // Update progress bar\n      }\n\n      setIsDone(true);  // Mark upload as done\n    } catch (error) {\n      console.error('Error uploading file:', error);  // Handle upload error\n    } finally {\n      setIsLoading(false);  // Stop loading\n    }\n  };\n\n  // Effect to auto-hide the completion message after 3 seconds\n  useEffect(() => {\n    if (isDone) {\n      const timer = setTimeout(() => setIsDone(false), 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [isDone]);\n\n  // Render the progress bar with ASCII characters\n  const renderProgressBar = (progress: number) => {\n    const barWidth = 50;\n    const filledWidth = Math.floor((progress / 100) * barWidth);\n    const emptyWidth = barWidth - filledWidth;\n    return `${progress}% [${'■'.repeat(filledWidth)}${''.repeat(emptyWidth)}]`;\n  };\n\n  return (\n    <div className=\"pdf-uploader\">\n      <p>{'> SELECT PDF FILE:'}</p>\n      <input\n        type=\"file\"\n        accept=\".pdf\"\n        onChange={handleFileChange}  // Trigger file selection\n        className=\"file-input\"\n      />\n      <button\n        onClick={handleUpload}  // Trigger file upload\n        disabled={!file || isLoading}  // Disable button when no file or loading\n        className=\"upload-button\"\n      >\n        {isLoading ? 'UPLOADING...' : 'UPLOAD PDF'}\n      </button>\n      {isLoading && (\n        <div className=\"progress-container\">\n          <p>{'UPLOADING...'}</p>\n          <div className=\"progress-bar\">\n            {renderProgressBar(progress)}  // Display the progress bar\n          </div>\n        </div>\n      )}\n      {isDone && (\n        <div className=\"completion-message\">\n          {'> UPLOAD COMPLETE'}  // Show completion message\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PdfUploader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}