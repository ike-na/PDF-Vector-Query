{"ast":null,"code":"var _jsxFileName = \"/home/ike/PROJECTS/pdf-rag-query/frontend/src/components/PdfUploader.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './PdfUploader.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PdfUploader = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDone, setIsDone] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const handleFileChange = event => {\n    if (event.target.files && event.target.files[0]) {\n      setFile(event.target.files[0]);\n    }\n  };\n  const handleUpload = async () => {\n    if (!file) return;\n    setIsLoading(true);\n    setIsDone(false);\n    setProgress(0);\n\n    // Simulating upload process with progress\n    for (let i = 0; i <= 100; i += 5) {\n      await new Promise(resolve => setTimeout(resolve, 100));\n      setProgress(i);\n    }\n    setIsLoading(false);\n    setIsDone(true);\n  };\n  useEffect(() => {\n    if (isDone) {\n      const timer = setTimeout(() => setIsDone(false), 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [isDone]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pdf-uploader\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".pdf\",\n      onChange: handleFileChange,\n      className: \"file-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: !file || isLoading,\n      className: \"upload-button\",\n      children: \"Upload PDF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar-fill\",\n          style: {\n            width: `${progress}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"progress-text\",\n        children: `${progress}%`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), isDone && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"completion-message\",\n      children: \"Upload Complete!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(PdfUploader, \"ox9XNm0b02nv+jhzeHgUBLfNLvU=\");\n_c = PdfUploader;\nexport default PdfUploader;\nvar _c;\n$RefreshReg$(_c, \"PdfUploader\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PdfUploader","_s","file","setFile","isLoading","setIsLoading","isDone","setIsDone","progress","setProgress","handleFileChange","event","target","files","handleUpload","i","Promise","resolve","setTimeout","timer","clearTimeout","className","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","style","width","_c","$RefreshReg$"],"sources":["/home/ike/PROJECTS/pdf-rag-query/frontend/src/components/PdfUploader.tsx"],"sourcesContent":["import React, { useState, ChangeEvent, useEffect } from 'react';\nimport './PdfUploader.css';  // Import the CSS file\n\nconst PdfUploader: React.FC = () => {\n  const [file, setFile] = useState<File | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isDone, setIsDone] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      setFile(event.target.files[0]);\n    }\n  };\n\n  const handleUpload = async () => {\n    if (!file) return;\n\n    setIsLoading(true);\n    setIsDone(false);\n    setProgress(0);\n\n    // Simulating upload process with progress\n    for (let i = 0; i <= 100; i += 5) {\n      await new Promise(resolve => setTimeout(resolve, 100));\n      setProgress(i);\n    }\n\n    setIsLoading(false);\n    setIsDone(true);\n  };\n\n  useEffect(() => {\n    if (isDone) {\n      const timer = setTimeout(() => setIsDone(false), 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [isDone]);\n\n  return (\n    <div className=\"pdf-uploader\">\n      <input\n        type=\"file\"\n        accept=\".pdf\"\n        onChange={handleFileChange}\n        className=\"file-input\"\n      />\n      <button\n        onClick={handleUpload}\n        disabled={!file || isLoading}\n        className=\"upload-button\"\n      >\n        Upload PDF\n      </button>\n      {isLoading && (\n        <div className=\"progress-container\">\n          <div className=\"progress-bar\">\n            <div \n              className=\"progress-bar-fill\"\n              style={{ width: `${progress}%` }}\n            ></div>\n          </div>\n          <p className=\"progress-text\">{`${progress}%`}</p>\n        </div>\n      )}\n      {isDone && (\n        <div className=\"completion-message\">\n          Upload Complete!\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PdfUploader;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}